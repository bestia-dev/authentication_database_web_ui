-- tier3_database_postgres/a2_migrate_mod/a2_migrate_column.sql_fn

select a2_migrate_function('a2_migrate_column',
$source_code$

create function a2_migrate_column(_table name, _column name, _type text, _default text, _not_null text)
returns text 
as
-- checks in the a2_source_code if the column is already installed
-- if is equal, nothing happens
-- else write an error, because we cannot just drop a column !
-- finally insert/update into a2_source_code  
-- alter table webpage add COLUMN webpage_txt varchar(100) not null;
-- alter table webpage alter COLUMN webpage_txt varchar(100) not null;

$$
declare
   _default_txt text := case when _default <> '' then format(' default(%s)', _default) else '' end;
   _not_null_txt text := case when _not_null <> '' then format(' %s', _not_null) else '' end;
   _definition text := format('%s%s%s', _type, _default_txt, _not_null_txt);
   _object_name text :=  format('%I.%I', _table, _column);
   _old_definition text;   
   _installed_definition text;
   _installed_type text;
   _installed_default text;
   _installed_not_null text;
   _x_void text;
begin

   -- I can FORCE here only certain data types with explicit names. The same set of data types I can use inside the Rust code.
   -- Postgres is a mess with datatypes. You can call it integer, int4, int and what not. This is bad. Really bad if you want to analyze anything.
   -- I will FORCE here an exact nomenclature of a limited set of data types. The most technical and exact one. They call it 'udt_name'.

   if not (_type like 'varchar(%)' or _type in ('text','int4','bool','timestamp')) then
      RAISE EXCEPTION 'Data type %s in not allowed in this limited set of types: varchar(x), text, int4, bool, timestamp.', _type;
   end if;

   if not (_not_null = 'not null') then
      RAISE EXCEPTION 'Parameter _not_null can only contain the phrase "not null", not the phrase "%s".', _not_null;
   end if;


   if not exists(select * from a2_source_code a where a.object_name = _object_name) then
      if exists(select * from information_schema.columns c where c.table_schema = 'public' and c.table_name=_table and c.column_name=_column) then
         select d.installed_definition into _installed_definition from a1_list_all_table_field_definition d where d.table_name=_table and d.column_name=_column ;
         if _installed_definition <> _definition then
            return format('ERROR: Installed definition is different:    %s   %s', _installed_definition, _definition);
         end if;
      else
         execute format('alter table %I add COLUMN %I %s;', _table, _column, _definition);
      end if;

      insert into a2_source_code (object_name, definition)
      values (_object_name, _definition);

      return format('Inserted column: %I', _object_name);
   else
      select a.definition 
      into _old_definition
      from a2_source_code a
      where a.object_name = _object_name;

      if _definition <> _old_definition then
         if not exists(select * from information_schema.columns c where c.table_schema = 'public' and c.table_name=_table and c.column_name=_column) then
            return format('ERROR: Column "%s" exists in a2_source_code, but is not already installed ?!?', _object_name);
         end if;
         
         select d.installed_type, d.installed_default, d.installed_not_null
         into _installed_type, _installed_default, _installed_not_null
         from a1_list_all_table_field_definition d where d.table_name=_table and d.column_name=_column ;

         if _installed_type <> _type then
            execute format('alter table %I alter COLUMN %I TYPE %s;', _table, _column, _type);
         end if;

         if _installed_default <> _default then
            execute format('alter table %I alter COLUMN %I SET DEFAULT %s;', _table, _column, _default);
         end if;         

         if _installed_not_null <> _not_null then
            if _not_null = '' then
               execute format('alter table %I alter COLUMN %I DROP not null;', _table, _column);
            else
               execute format('alter table %I alter COLUMN %I SET %s;', _table, _column, _not_null);
            end if;
         end if;  

         update a2_source_code
         set definition = _definition
         where object_name = _object_name;

         return format('Updated column: %I', _object_name);
      end if;

   end if;
   return format('Up to date Column: %I', _object_name);
end;
$$ language plpgsql;

$source_code$);
