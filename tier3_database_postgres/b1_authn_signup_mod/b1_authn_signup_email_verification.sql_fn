-- tier3_database_postgres/b1_authn_signup_mod/b1_authn_signup_email_verification.sql_fn

select a2_migrate_function('b1_authn_signup_email_verification',
$source_code$

-- select * from b1_authn_signup
-- select * from b1_authn_signup_email_verification('ee148934d3f448b5832f8bd5ce1bc8e6')

create function  b1_authn_signup_email_verification(_uuid varchar(100))
returns table(verification_h1 text, verification_p text) 
as
$$
declare
    _uuid varchar(100)=lower(_uuid);

    _user_email varchar(100);
    _password_hash varchar(200);
    _b2_authn_login_id int4;
begin

if exists (select * from b1_authn_signup a 
    where a.verification_uuid=_uuid) then

    select b.user_email, b.password_hash 
    into _user_email, _password_hash
    from b1_authn_signup b 
    where b.verification_uuid=_uuid;

    if not exists(select * from b2_authn_login a 
        where a.user_email = _user_email) then

        -- some web apps need a manual process to grant access. 
        -- This is not difficult to implement, but for a tutorial let's not complicate much.
        -- In this particular case, I will grant access immediatelly.
        -- move the signup user into the login table with minimal authorization

        -- the parameter 0 means that the insert function will choose the id number over 101
        -- The logins under 100 are reserved to administrators, developers and special needs.
        -- So the id can be used because is fixed.
        select b2_authn_login_id 
        into _b2_authn_login_id
        from b2_authn_login_insert(0, _user_email, _password_hash);

        -- role 3-user
        perform b3_authn_login_role_insert(_b2_authn_login_id,3);

        perform b1_authn_signup_delete(_user_email);        

    else
        return query select 'Verification of your email failed' as verification_h1, 
        'User email already exists.' as verification_p;
    end if;

    return query select 'Verification of your email successful' as verification_h1, 
    'You can now login into the web app: /webpage_hits_admin/b2_authn_login_mod/b2_authn_login
' as verification_p;
else
    return query select 'Verification of your email failed.' as verification_h1, 
    '' as verification_p;
end if;

end; 
$$ language plpgsql;

$source_code$);