-- tier3_database_postgres/b1_authn_signup_mod/b1_authn_signup_insert.sql_fn

select a2_migrate_function('b1_authn_signup_insert',
$source_code$

create function  b1_authn_signup_insert(
_user_email varchar(100),
_password_hash varchar(200),
_verification_uuid varchar(100),
_verified bool)
returns table(is_allowed bool, user_email varchar(100)) 
language plpgsql as
$$
declare
    _is_allowed bool;
begin

-- region: I want to limit the emails that can signup. This is ok for some internal website or intranet.
select a.is_allowed
into _is_allowed
from b1_authn_signup_process_email(_user_email) a;

if _is_allowed = false then
    return query 
    select _is_allowed as is_allowed, ''::varchar(100) as user_email;
end if;
-- endregion: I want to limit the emails that can signup. This is ok for some internal website or intranet.

-- delete if already exists. Only the last attempt may be succesful.
if exists (select * from b1_authn_signup a where a.user_email=_user_email) then
    delete from b1_authn_signup a
    where a.user_email=_user_email;
end if;

insert into b1_authn_signup(user_email, password_hash, verification_uuid, verified)
values(_user_email,_password_hash,_verification_uuid, _verified);

return query 
select _is_allowed as is_allowed, a.user_email
from b1_authn_signup a
where a.user_email=_user_email;

end; 
$$;

$source_code$);