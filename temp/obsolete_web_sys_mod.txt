// web_sys_mod.rs
//! helper functions for web_sys, window, document, dom, console,
//! local_storage, session_storage,...

// crate level because of !
#![allow(dead_code)]

// region: use
use unwrap::unwrap;
use wasm_bindgen::{JsCast, JsValue};
use wasm_bindgen_futures::JsFuture;
use web_sys::console;
use web_sys::{Request, RequestInit, Response};
// endregion: use

/// Simple macro to set listener of onclick events to an element_id to an async function.
/// no args: on_click!(element_1_id, function_ident)
/// no args: on_click!("example_email",example_email)
#[macro_export]
macro_rules! on_click {
    ($element_1_id: expr, $function_ident: ident) => {{
        let closure = Closure::wrap(Box::new(move || {
            wasm_bindgen_futures::spawn_local(async move {
                $function_ident();
            });
        }) as Box<dyn FnMut()>);

        let html_element = get_html_element_by_id($element_1_id);
        html_element.set_onclick(Some(closure.as_ref().unchecked_ref()));
        closure.forget();
    }};  
}

/// Simple macro to set listener of onkeyup events to an element_id.
/// on_keyup!(element_id, function_ident)
/// on_keyup!("regex_text", run_regex)
#[macro_export]
macro_rules! on_keyup {
    ($element_id: expr, $function_ident: ident) => {{
        let closure = Closure::wrap(Box::new(move || {
            $function_ident();
        }) as Box<dyn FnMut()>);

        let html_element = get_html_element_by_id($element_id);
        html_element.set_onkeyup(Some(closure.as_ref().unchecked_ref()));
        closure.forget();
    }};
}

/// return window object
pub fn window() -> web_sys::Window {
    unwrap!(web_sys::window())
}

/// debug write into session_storage
pub fn debug_write(text: &str) {
    // writing to the console is futile for mobile phones
    // I must write it on the UI.
    // so I must access this string from the UI renderer
    // add_to_begin_of_debug_text(text);
    console::log_1(&JsValue::from_str(text));
}

/// get element by id
pub fn get_element_by_id(element_id: &str) -> web_sys::Element {
    let document = unwrap!(window().document());
    match document.get_element_by_id(element_id) {
        Some(el) => el,
        None => {
            debug_write(&format!(
                "Error: not found get_element_by_id {}",
                element_id
            ));
            panic!("Error: not found get_element_by_id")
        }
    }
}
/// get html element by id
pub fn get_html_element_by_id(element_id: &str) -> web_sys::HtmlElement {
    let element = get_element_by_id(element_id);
    let html_element: web_sys::HtmlElement = unwrap!(element.dyn_into::<web_sys::HtmlElement>());
    //return
    html_element
}

/// save to local storage
pub fn save_to_local_storage(name: &str, value: &str) {
    let ls = unwrap!(unwrap!(window().local_storage()));
    let _x = ls.set_item(name, value);
}

/// load string from local_storage
pub fn load_string_from_local_storage(name: &str, default_value: &str) -> String {
    let ls = unwrap!(unwrap!(window().local_storage()));
    // return nickname
    unwrap!(ls.get_item(name)).unwrap_or(default_value.to_string())
}

/// fetch in Rust with async await for executor spawn_local()
/// return the response as String. Any error will panic.
pub async fn fetch_response(url: String) -> String {
    // Request init
    let mut opts = RequestInit::new();
    opts.method("GET");
    let request = unwrap!(Request::new_with_str_and_init(&url, &opts));
    // log1("before fetch");
    let resp_jsvalue = unwrap!(JsFuture::from(window().fetch_with_request(&request)).await);
    // log1("after fetch");
    let resp: Response = unwrap!(resp_jsvalue.dyn_into());
    // log1("before text()");
    let text_jsvalue = unwrap!(JsFuture::from(unwrap!(resp.text())).await);
    let txt_response: String = unwrap!(text_jsvalue.as_string());
    // debug_write(&txt_response);
    // returns response as String
    txt_response
}

/// fetch in Rust with async await for executor spawn_local()
/// return the response as json. Any error will panic.
pub async fn fetch_json_response(url: String, json_jsvalue_body: String) -> String {
    let headers = web_sys::Headers::new().unwrap();
    headers.set("Accept", "application/json").unwrap();
    headers.set("Content-Type", "application/json").unwrap();
    // Request init
    let mut opts = RequestInit::new();
    opts.method("POST");
    opts.headers(&headers);
    // headers: new Headers({'content-type': 'application/json'}),
    let json_jsvalue_body = JsValue::from_str(&json_jsvalue_body);
    opts.body(Some(&json_jsvalue_body));
    let request = unwrap!(Request::new_with_str_and_init(&url, &opts));
    // log1("before fetch");
    let resp_jsvalue = unwrap!(JsFuture::from(window().fetch_with_request(&request)).await);
    // log1("after fetch");
    let resp: Response = unwrap!(resp_jsvalue.dyn_into());
    // log1("before text()");
    let text_jsvalue = unwrap!(JsFuture::from(unwrap!(resp.text())).await);
    let txt_response: String = unwrap!(text_jsvalue.as_string());
    txt_response
}

/// get text_area element value string by id
pub fn get_text_area_element_value_string_by_id(element_id: &str) -> String {
    // debug_write("before get_element_by_id");
    let text_area_element = get_element_by_id(element_id);
    // debug_write("before dyn_into");
    let text_area_html_element =
        unwrap!(text_area_element.dyn_into::<web_sys::HtmlTextAreaElement>());
    // debug_write("before value()");
    text_area_html_element.value()
}

/// set text_area element value string by id
pub fn set_text_area_element_value_string_by_id(element_id: &str, value: &str) {
    //debug_write("before get_element_by_id");
    let text_area_element = get_element_by_id(element_id);
    //debug_write("before dyn_into");
    let text_area_html_element =
        unwrap!(text_area_element.dyn_into::<web_sys::HtmlTextAreaElement>());
    //debug_write("before value()");
    text_area_html_element.set_value(value);
}


/// get inner_text as string by id
/// very usable for "content editable" div or pre>code
pub fn get_element_inner_text_by_id(element_id: &str) -> String {
    //debug_write("before get_element_by_id");
    let html_element = get_html_element_by_id(element_id);
    // inner_html() contains all the html syntax. inner_text() only the text
    let html = html_element.inner_text();
    // return
    html
}

/// pseudo random generator of javascript
fn get_pseudo_random_int(max: i32) -> i32 {
    let f = js_sys::Math::random() * (max as f64);
    let f = f.floor();
    // return
    f as i32
}

/// jump to element
pub fn scroll(element_1_id: &str) {
    let html_element = get_html_element_by_id(element_1_id);
    html_element.scroll_into_view();
}

/// make visible the element
pub fn display_block(element_id: &str) {
    save_to_local_storage(&format!("{}.display", element_id), "block");
    let html_element = get_html_element_by_id(element_id);
    unwrap!(html_element.style().set_property("display", "block"));
}

/// make invisible the element
pub fn display_none(element_id: &str) {
    save_to_local_storage(&format!("{}.display", element_id), "none");
    let html_element = get_html_element_by_id(element_id);
    unwrap!(html_element.style().set_property("display", "none"));
}

/// change height
/// change_height("el_id","auto");
/// change_height("el_id","150px");
pub fn change_height(element_id: &str, height: &str) {
    let html_element = get_html_element_by_id(element_id);
    unwrap!(html_element.style().set_property("height", height));
}

/// copy to clipboard
pub fn copy_to_clipboard(text: &str) {
    // escaping the backtick for the template string multi line
    // that is delimited with backticks in javascript
    let text = text.replace("`", r#"\`"#);
    let js_cmd = format!(r#"navigator.clipboard.writeText(`{}`)"#, text);
    unwrap!(js_sys::eval(&js_cmd));
}

// open URL in new tab
pub fn open_url_in_new_tab(url: &str) {
    // just an example of one method how to use javascript code inside Rust code
    let js_cmd = &format!(
        r#"{{
        var win = window.open('{}', '_blank','noopener');
        win.focus();
        }}"#,
        url,
    );
    unwrap!(js_sys::eval(&js_cmd));
}

/// in css there are 85 colors
/// increment index with rotation at 85
pub fn color_index_increment(color_index: &mut usize) {
    *color_index += 1;
    if *color_index > (85 as usize) {
        *color_index = 0;
    }
}
